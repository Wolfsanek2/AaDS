// Heap - двоичная куча
// Add(), Extract(), Top()
// MaxHeap - куча, у которой элемент с наибольшим приоритетом имеет максимальный приоритет. MinHeap - в вершине элемент с минимальным приоритетом
//      25
//  10      20
//5    9   2   1
// Представление в виде массива:
// 25 10 20 5 9 2 1
// потомок 1: 2i+1
// потомок 2: 2i-1
// родитель: (i-1)/2
// i - номер элемента

// Добавление элемента:
// 1. Добавляем элемент в конец:
// 25 10 20 5 9 2 1 15
// 2. Применяем служебную функцию SiftUp необходимое число раз:
// Она меняет элемент с его родителем если он меньше.
// Добавление занимает время O(log(N))

// Извлечение элемента
// Только для вершины т.к. в куче не может быть пустот.
// 1. Извлекаем элемент
// 2. Последний элемент перемещаем в вершшину
// 3. Применяем SiftDown для вершины
// Выполняется за O(log(N))

// Как создать кучу
// 1. Берем массив, проходим по элементам, добавляем каждый в кучу. За O(Nlog(N))
// 2. Построить кучу "на месте". Считаем, что массив - уже построенная куча с нарушенными свойствами. Проходим от конца (середины) к началу и делаем SiftDown. Называется heapify. За O(N)



// Перегрузка оператора <<:
// std::ostream& operator<<(std::ostream &out, const Point&){}

// Компаратор реализуется с помощью указателя на функцию.